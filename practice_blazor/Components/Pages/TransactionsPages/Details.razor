@page "/transactions/details"
@using Microsoft.EntityFrameworkCore
@using practice_blazor.Models
@inject IDbContextFactory<practice_blazor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Transactions</h2>
    <hr />
    @if (transactions is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ClientName</dt>
            <dd class="col-sm-10">@transactions.ClientName</dd>
            <dt class="col-sm-2">ClientAppoinment</dt>
            <dd class="col-sm-10">@transactions.ClientAppoinment</dd>
            <dt class="col-sm-2">PaymentDate</dt>
            <dd class="col-sm-10">@transactions.PaymentDate</dd>
            <dt class="col-sm-2">Payment</dt>
            <dd class="col-sm-10">@transactions.Payment</dd>
            <dt class="col-sm-2">PaymentMethod</dt>
            <dd class="col-sm-10">@transactions.PaymentMethod</dd>
        </dl>
        <div>
            <a href="@($"/transactions/edit?id={transactions.Id}")">Edit</a> |
            <a href="@($"/transactions")">Back to List</a>
        </div>
    }
</div>

@code {
    private Transactions? transactions;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        transactions = await context.Transactions.FirstOrDefaultAsync(m => m.Id == Id);

        if (transactions is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
