@page "/clients/create"
@using Microsoft.EntityFrameworkCore
@using practice_blazor.Models
@inject IDbContextFactory<practice_blazor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Clients</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Clients" OnValidSubmit="AddClients" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="clientname" class="form-label">Client Name:</label> 
                <InputText id="clientname" @bind-Value="Clients.ClientName" class="form-control" /> 
                <ValidationMessage For="() => Clients.ClientName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="birthday" class="form-label">Birthday:</label> 
                <InputDate id="birthday" @bind-Value="Clients.Birthday" class="form-control" /> 
                <ValidationMessage For="() => Clients.Birthday" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/clients">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Clients Clients { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddClients()
    {
        using var context = DbFactory.CreateDbContext();
        context.Clients.Add(Clients);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/clients");
    }
}
